package com.june.notebook;

import java.io.*;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Locale;
import java.util.Objects;
import java.util.Scanner;

import static com.june.notebook.Notebook.LOGGER;
import static com.june.notebook.Notebook.pageLocation;
import static com.june.notebook.screens.menuScreen.*;

public class Util {
    public static class resetConfig {
        public static void reset() {
            try {
                FileWriter fileOverwriter = new FileWriter("config/vanilla-notebook/config.cfg");
                fileOverwriter.write("# You need to reload for these to take affect!\n# Directory for the pages to be stored in (e.g .minecraft/CoordinateBook)\npagedirectory=Notebook/Default\n# Set page limits, negative numbers mean no limit\npagelimit=-1\n# Page to start on after opening the book\nstartpage=0\n# Presets enabled?\npresets=true");
                fileOverwriter.close();
            } catch (IOException e) { e.printStackTrace(); }

            try {
                FileWriter fileOverwriter = new FileWriter("config/vanilla-notebook/bookmark.cfg");
                fileOverwriter.write("# This file stores the bookmark data; DO NOT EDIT THIS FILE as it can cause issues, bugs and crashing!\n0");
                fileOverwriter.close();
            } catch (IOException e) { e.printStackTrace(); }
        }
    }
    public static class addCharacter {
        public static String add(String str, int position, String keyStr) {
            int len = str.length();
            char[] updatedArr = new char[len + 1];
            try {
                char ch = keyStr.charAt(0);
                str.getChars(0, len, updatedArr, 0);
                updatedArr[len - position] = ch;
                str.getChars(len - position, len, updatedArr, len - position + 1);
            } catch (IndexOutOfBoundsException e) {
                add(str, 0, keyStr);
            }
            return new String(updatedArr)+"";
        }
    }
    public static class ensureFileStructureExists {
        public static boolean exists(String folders) {
            return Files.exists(Path.of(folders));
        }
        public static void createFiles(boolean exists) { if (!exists) { try { Files.createDirectories(Paths.get("Notebook/")); } catch (IOException e) { throw new RuntimeException(e); } } }
    }
    public static class generateConfig {
        public static void generate(int i) {
            boolean madeConfigFile;
            boolean madeConfigFolder;
            boolean madeBookmarkFile;

            ++i;

            madeConfigFolder = new File("config/vanilla-notebook/").mkdirs();
            try { madeConfigFile = new File("config/vanilla-notebook/config.cfg").createNewFile(); }
            catch (IOException e) { throw new RuntimeException(e); }
            try { madeBookmarkFile = new File("config/vanilla-notebook/config.cfg").createNewFile(); }
            catch (IOException e) { throw new RuntimeException(e); }

            if (i <= 5 && !new File("config/vanilla-notebook/").exists() || !new File("config/vanilla-notebook/config.cfg").exists()) {
                Notebook.LOGGER.info("Couldn't create config folder or file.. Trying again, attempt {}/5", i);
                if (i == 5) { Notebook.LOGGER.info("If this persists on startup, please make a bug report. The mod is unable to make the config files!"); }
                generate(i);
            }
        }
    }
    public static class readConfig {
        public static String readCfg(String entry, int cfgLine) throws IOException {
            String dat = Files.readAllLines(Paths.get("config/vanilla-notebook/config.cfg")).get(cfgLine);
            return dat.substring(entry.length()+2);
        }
        public static void getBookmarkPage() throws IOException {
            String dat = Files.readAllLines(Paths.get("config/vanilla-notebook/bookmark.cfg")).get(1);
            bookmarkedpage = Integer.parseInt(dat);
        }
        public static void read() {
            Notebook.LOGGER.info("Reading config...");

            try {
                Notebook.pageLocation = readCfg("pagedirector", 2);
            } catch (IOException e) { throw new RuntimeException(e); }

            try {
                pageLimit = Integer.parseInt(readCfg("pagelimi", 4));
            } catch (IOException e) { throw new RuntimeException(e); }

            try {
                page = Integer.parseInt(readCfg("startpag", 6));
            } catch (IOException e) { throw new RuntimeException(e); }

            try {
                String preset = readCfg("preset", 8);
                Notebook.presetsEnabled = preset.toLowerCase(Locale.ROOT).equals("true");


            } catch (IOException e) { throw new RuntimeException(e); }

            try {
                getBookmarkPage();
            } catch (IOException e) { throw new RuntimeException(e); }
        }
    }
    public static class removePage {
        public static void remove(int rmpage) {
            int files = Objects.requireNonNull(new File(pageLocation + "/").list()).length;
            int pagesToRename = files - rmpage;
            boolean tmp = false;
            if (rmpage == 0) { LOGGER.warn("Can't delete first page"); }
            else if (rmpage == files-1) { goToPreviousPage(); tmp = new File(pageLocation +"/"+ rmpage + ".jdat").delete(); }
            else {
                int i = 0;
                tmp = new File(pageLocation +"/"+ rmpage + ".jdat").delete();
                tmp = new File(pageLocation +"/"+ (files-1) + ".jdat").delete();

                while (i < files-rmpage) {
                    StringBuilder fulldata = new StringBuilder();
                    try {
                        if (new File(pageLocation +"/"+ (rmpage+i) + ".jdat").exists()) {
                            Scanner readPageContent = new Scanner(new File(pageLocation +"/"+ (rmpage+i) + ".jdat"));
                            while (readPageContent.hasNextLine()) {
                                String data = readPageContent.nextLine();
                                if (!fulldata.toString().equals("")) data = "\n" + data;
                                fulldata.append(data);
                            }
                            readPageContent.close();
                        }
                    } catch (FileNotFoundException e) { e.printStackTrace(); }
                    try {
                        FileWriter f = new FileWriter(pageLocation +"/"+ (rmpage+i-1) + ".jdat", false);
                        f.write(String.valueOf(fulldata));
                        f.close();
                    } catch (IOException e) { e.printStackTrace(); }

                    i++;
                }
            }
        }
    }
}


