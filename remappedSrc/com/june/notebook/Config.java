package com.june.notebook;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Locale;

import static com.june.notebook.screens.menuScreen.*;

public class Config {
    public static String readCfg(String entry, int cfgLine) throws IOException {
       String dat = Files.readAllLines(Paths.get("config/vanilla-notebook/config.cfg")).get(cfgLine);
       return dat.substring(entry.length()+2);
    }
    public static void getBookmarkPage() throws IOException {
       String dat = Files.readAllLines(Paths.get("config/vanilla-notebook/bookmark.cfg")).get(1);
       bookmarkedpage = Integer.parseInt(dat);
    }
    public static void read() {
        Notebook.LOGGER.info("Reading config...");

        try {
            Notebook.pageLocation = readCfg("pagedirector", 2);
        } catch (IOException e) { throw new RuntimeException(e); }
        try {
            pageLimit = Integer.parseInt(readCfg("pagelimi", 4));
        } catch (IOException e) { throw new RuntimeException(e); }

        try {
            page = Integer.parseInt(readCfg("startpag", 6));
        } catch (IOException e) { throw new RuntimeException(e); }

        try {
            String preset = readCfg("preset", 8);
            Notebook.presetsEnabled = preset.toLowerCase(Locale.ROOT).equals("true");
        } catch (IOException e) { throw new RuntimeException(e); }

        try {
            getBookmarkPage();
        } catch (IOException e) { throw new RuntimeException(e); }
    }
    public static void reset() {
        try {
            FileWriter fileOverwriter = new FileWriter("config/vanilla-notebook/config.cfg");
            fileOverwriter.write("# You need to reload for these to take affect!\n# Directory for the pages to be stored in (e.g .minecraft/CoordinateBook)\npagedirectory=Notebook/Default\n# Set page limits, negative numbers mean no limit\npagelimit=-1\n# Page to start on after opening the book\nstartpage=0\n# Presets enabled?\npresets=true");
            fileOverwriter.close();
        } catch (IOException e) { e.printStackTrace(); }

        try {
            FileWriter fileOverwriter = new FileWriter("config/vanilla-notebook/bookmark.cfg");
            fileOverwriter.write("# This file stores the bookmark data; DO NOT EDIT THIS FILE as it can cause issues, bugs and crashing!\n0");
            fileOverwriter.close();
        } catch (IOException e) { e.printStackTrace(); }
    }
    public static void generate(int i) {
        boolean madeConfigFile;
        boolean madeConfigFolder;
        boolean madeBookmarkFile;

        ++i;

        madeConfigFolder = new File("config/vanilla-notebook/").mkdirs();
        try { madeConfigFile = new File("config/vanilla-notebook/config.cfg").createNewFile(); }
        catch (IOException e) { throw new RuntimeException(e); }
        try { madeBookmarkFile = new File("config/vanilla-notebook/config.cfg").createNewFile(); }
        catch (IOException e) { throw new RuntimeException(e); }

        if (i <= 5 && !new File("config/vanilla-notebook/").exists() || !new File("config/vanilla-notebook/config.cfg").exists()) {
            Notebook.LOGGER.info("Couldn't create config folder or file.. Trying again, attempt {}/5", i);
            if (i == 5) { Notebook.LOGGER.info("If this persists on startup, please make a bug report. The mod is unable to make the config files!"); }
            generate(i);
        }
    }
}
